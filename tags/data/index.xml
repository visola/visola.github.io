<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data on Vinnie&#39;s Blog</title>
    <link>http://example.org/tags/data/</link>
    <description>Recent content in data on Vinnie&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DAO, Repository and Service, digging deeper</title>
      <link>http://example.org/posts/2012-11-12-dao-repository-and-service-digging-deeper/</link>
      <pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012-11-12-dao-repository-and-service-digging-deeper/</guid>
      <description>The first time I heard the term service layer I was intrigued by it because I always used a Data Access Object to access my data. I thought it was just a new way to refer to the same thing. Of course I was wrong. A couple of years later I started to use Spring Data and again I was confronted with the Repository a different name for the same thing, at least that was what I thought, and again, I was wrong.</description>
    </item>
    
    <item>
      <title>Simple Spring Data Example</title>
      <link>http://example.org/posts/2012-03-26-simple-spring-data-example/</link>
      <pubDate>Mon, 26 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2012-03-26-simple-spring-data-example/</guid>
      <description>As my first post I&amp;rsquo;m going to do a very simple command line application that manages one entity called Person. The purpose of this example is to demonstrate how powerful the new Spring Data projects family are.
Spring Data Spring Data is a family of projects that aims to create a repository layer. The idea is to have an abstract layer were all the dependencies will point to and different implementations with all kinds of data repositories (SQL and NoSQL), similiar to what JDBC did for SQL databases.</description>
    </item>
    
  </channel>
</rss>